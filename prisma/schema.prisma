generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser                 String                  @id @default(uuid())
  nameUser               String?
  email                  String                  @unique
  password               String
  phoneNumber            String?
  address                String?
  role                   Role                    @default(USER)
  avatar                 String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  accountType            accountType             @default(LOCAL)
  isActive               Boolean                 @default(false)
  gender                 Gender                  @default(Male)
  level                  Level?
   xp          Int      @default(0)
    xpToNext Int     @default(100) // ngưỡng để lên level tiếp theo
currentStreak       Int       @default(0) // Chuỗi hiện tại
  longestStreak       Int       @default(0) // Chuỗi dài nhất từng đạt được
  lastStudiedAt       DateTime? // Ngày cuối cùng có hoạt động học


  des                    De[]
  forumComment           ForumComment[]
  forumCommentLikes      ForumCommentLikes[]
  forumPosts             ForumPost[]
  forumPostLikes         ForumPostLikes[]
  forumThreads           ForumThreads[]
  Topic                  Topic[]
  tuVungs                TuVung[]
  userAnswers            UserAnswer[]
  userTestResults        UserTestResult[]
  userWritingSubmissions UserWritingSubmission[]
  verificationCodes      VerificationCode[]
  grammarCategories     GrammarCategory[]
  speaking              UserSpeakingSubmission[]
}

model VerificationCode {
  idCode     String   @id @default(uuid())
  idUser     String
  token      String
  type       OTPType
  expiration DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
}

model UserTestResult {
  idTestResult    String       @id @default(uuid())
  idUser          String
  idDe            String
  score           Int?         @default(0) //score theo thang 40
  total_correct   Int?         @default(0)
  total_questions Int?         @default(0)
  raw_score       Int?         @default(0)
  band_score      Float        @default(0)
  duration        Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  finishedAt      DateTime?
  startedAt       DateTime     @default(now())
  status          TestStatus   @default(IN_PROGRESS)
  level           Level        @default(Low)
  userAnswer      UserAnswer[]
  de              De           @relation(fields: [idDe], references: [idDe], onDelete: Cascade)
  user            User         @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
}

model TuVung {
  idTuVung      String     @id @default(uuid())
  word          String
  phonetic      String?
  meaning       String
  example       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  idUser        String
  idTopic       String?
  loaiTuVung    loaiTuVung
  level         Level?
  correctStreak Int        @default(0)
  lastReviewed  DateTime?
  xp            Int        @default(0)
  topic         Topic?     @relation(fields: [idTopic], references: [idTopic], onDelete: Cascade)
  user          User       @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
}

model Topic {
  idTopic   String   @id @default(uuid())
  nameTopic String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idUser    String
  user      User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  tuVungs   TuVung[]
}

model De {
  idDe            String           @id @default(uuid())
  idUser          String
  title           String
  duration        Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  loaiDe          loaiDe
  img             String?
  description     String?
  numberQuestion  Int
  audioUrl        String?
  level           Level            @default(Low)
  user            User             @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  nhomCauHois     NhomCauHoi[]
  parts           Part[]
  userTestResults UserTestResult[]
  writingTasks    WritingTask[]
  speakingTasks   SpeakingTask[]
}

model Part {
  idPart      String       @id @default(uuid())
  idDe        String
  namePart    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cauHois     CauHoi[]
  doanVans    DoanVan?
  nhomCauHois NhomCauHoi[]
  de          De           @relation(fields: [idDe], references: [idDe], onDelete: Cascade)
}

model DoanVan {
  idDoanVan       String   @id @default(uuid())
  idPart          String   @unique
  title           String
  content         String
  image           String?
  description     String?
  numberParagraph Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  part            Part     @relation(fields: [idPart], references: [idPart], onDelete: Cascade)
}

model NhomCauHoi {
  idNhomCauHoi  String       @id @default(uuid())
  idDe          String
  idPart        String
  title         String
  startingOrder Int
  endingOrder   Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  typeQuestion  QuestionType
  cauHois       CauHoi[]
  de            De           @relation(fields: [idDe], references: [idDe], onDelete: Cascade)
  part          Part         @relation(fields: [idPart], references: [idPart], onDelete: Cascade)
}

model CauHoi {
  idCauHoi       String       @id @default(uuid())
  idNhomCauHoi   String
  idPart         String
  numberQuestion Int
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  answers        Answer[]
  nhomCauHoi     NhomCauHoi   @relation(fields: [idNhomCauHoi], references: [idNhomCauHoi], onDelete: Cascade)
  part           Part         @relation(fields: [idPart], references: [idPart], onDelete: Cascade)
  options        Option[]
  userAnswers    UserAnswer[]
}

model Option {
  idOption       String       @id @default(uuid())
  idCauHoi       String
  option_label   String
  option_content String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  answers        Answer[]
  cauHoi         CauHoi       @relation(fields: [idCauHoi], references: [idCauHoi], onDelete: Cascade)
  userAnswers    UserAnswer[]
}

model Answer {
  idAnswer       String   @id @default(uuid())
  idCauHoi       String
  idOption       String?
  answer_text    String?
  matching_key   String?
  matching_value String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cauHoi         CauHoi   @relation(fields: [idCauHoi], references: [idCauHoi], onDelete: Cascade)
  option         Option?  @relation(fields: [idOption], references: [idOption], onDelete: Cascade)
}

model UserAnswer {
  idBaiLam       String         @id @default(uuid())
  idCauHoi       String
  idUser         String
  idOption       String?
  answerText     String?
  submitted_at   DateTime       @default(now())
  isCorrect      Boolean        @default(false)
  idTestResult   String
  matching_key   String?
  matching_value String?
  userAnswerType QuestionType
  cauHoi         CauHoi         @relation(fields: [idCauHoi], references: [idCauHoi], onDelete: Cascade)
  option         Option?        @relation(fields: [idOption], references: [idOption], onDelete: Cascade)
  testResult     UserTestResult @relation(fields: [idTestResult], references: [idTestResult], onDelete: Cascade)
  user           User           @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

  @@unique([idCauHoi, idUser, idTestResult])
}

model WritingTask {
  idWritingTask          String                  @id @default(uuid())
  idDe                   String
  prompt                 String
  time_limit             Int
  word_limit             Int
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  task_type              WritingTaskType
  image                  String?
  userWritingSubmissions UserWritingSubmission[]
  de                     De                      @relation(fields: [idDe], references: [idDe], onDelete: Cascade)
}

model UserWritingSubmission {
  idWritingSubmission String  @id @default(uuid())
  idUser              String
  idWritingTask       String
  submission_text     String
  submitted_at        DateTime      @default(now())
  status              WritingStatus @default(SUBMITTED)

  user                User          @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  writingTask         WritingTask   @relation(fields: [idWritingTask], references: [idWritingTask], onDelete: Cascade)
  
  feedback          Feedback[]
}


model Feedback {
  idFeedback              String @id @default(uuid())
  idWritingSubmission     String 
  taskResponse            String @db.Text
  coherenceAndCohesion    String @db.Text
  lexicalResource         String @db.Text
  grammaticalRangeAndAccuracy String @db.Text
  generalFeedback         String @db.Text
  detailedCorrections         Json? //Lưu lỗi chi tiết
  
  gradedAt                DateTime @default(now())

  submission UserWritingSubmission @relation(fields: [idWritingSubmission], references: [idWritingSubmission], onDelete: Cascade)
}

model ForumCategories {
  idForumCategories String         @id @default(uuid())
  description       String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  nameForum         String
  forumThreads      ForumThreads[]
}

model ForumThreads {
  idForumThreads    String          @id @default(uuid())
  idForumCategories String
  idUser            String
  title             String
  content           String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  forumPost         ForumPost[]
  forumCategories   ForumCategories @relation(fields: [idForumCategories], references: [idForumCategories], onDelete: Cascade)
  user              User            @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
}

model ForumPost {
  idForumPost    String           @id @default(uuid())
  idForumThreads String
  idUser         String
  content        String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  file           String?
  forumComment   ForumComment[]
  forumThreads   ForumThreads     @relation(fields: [idForumThreads], references: [idForumThreads], onDelete: Cascade)
  user           User             @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  forumPostLikes ForumPostLikes[]
}

model ForumComment {
  idForumComment    String              @id @default(uuid())
  idForumPost       String
  idUser            String
  content           String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  forumPost         ForumPost           @relation(fields: [idForumPost], references: [idForumPost], onDelete: Cascade)
  user              User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  forumCommentLikes ForumCommentLikes[]
}

model ForumPostLikes {
  idForumPostLikes String    @id @default(uuid())
  idForumPost      String
  idUser           String
  created_at       DateTime  @default(now())
  forumPost        ForumPost @relation(fields: [idForumPost], references: [idForumPost], onDelete: Cascade)
  user             User      @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

  @@unique([idForumPost, idUser])
}

model ForumCommentLikes {
  idForumCommentLikes String       @id @default(uuid())
  idForumComment      String
  idUser              String
  created_at          DateTime     @default(now())
  forumComment        ForumComment @relation(fields: [idForumComment], references: [idForumComment], onDelete: Cascade)
  user                User         @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

  @@unique([idForumComment, idUser])
}

enum Level {
  Low
  Mid
  High
}

enum Gender {
  Male
  Female
}

enum OTPType {
  OTP
  RESET_LINK
}

enum accountType {
  LOCAL
  GOOGLE
}

enum Role {
  USER
  ADMIN
  GIAOVIEN
}

enum TestStatus {
  IN_PROGRESS
  FINISHED
  EXPIRED
  CANCELLED
}

enum loaiTuVung {
  NOUN
  VERB
  ADJECTIVE
  ADVERB
  PHRASE
  IDIOM
  PREPOSITION
  CONJUNCTION
  INTERJECTION
}

enum loaiDe {
  LISTENING
  READING
  WRITING
  SPEAKING
}

enum QuestionType {
  MCQ
  TFNG
  YES_NO_NOTGIVEN
  MATCHING
  FILL_BLANK
  LABELING
  SHORT_ANSWER
  OTHER
}

enum WritingTaskType {
  TASK1
  TASK2
}

enum WritingStatus {
  SUBMITTED
  GRADED
}

model GrammarCategory {
  idGrammarCategory String    @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  idUser            String?   // null cho hệ thống, có giá trị cho user
  user              User?     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)

 
  grammars          GrammarsOnCategories[]

  @@unique([idUser, name])
}


model Grammar {
  idGrammar         String    @id @default(uuid())
  title             String
  explanation       String
  level             Level     @default(Low)
  commonMistakes    Json?
  examples          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  order             Int       @default(0)

  
  categories        GrammarsOnCategories[]
}

model GrammarsOnCategories {
  
  idGrammarCategory String
  idGrammar         String

  assignedAt        DateTime @default(now())
  assignedBy        String 

  
  category          GrammarCategory @relation(fields: [idGrammarCategory], references: [idGrammarCategory], onDelete: Cascade)
  grammar           Grammar         @relation(fields: [idGrammar], references: [idGrammar], onDelete: Cascade)

  
  @@id([idGrammarCategory, idGrammar])
}

model SpeakingTask {
  idSpeakingTask String  @id @default(uuid())
  idDe           String
  title          String // Ví dụ: "Speaking Test 1 - Topic: Travel"
  audioPromptUrl String? // Có thể là file audio của giám khảo
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  de            De                     @relation(fields: [idDe], references: [idDe], onDelete: Cascade)
  questions     SpeakingQuestion[]     // Các câu hỏi cho Part 1, 2, 3
  userSubmissions UserSpeakingSubmission[] // Các bài nộp của user

  @@unique([idDe]) // Đảm bảo mỗi 'De' (loại SPEAKING) chỉ có 1 SpeakingTask
}

model SpeakingQuestion {
  idSpeakingQuestion String           @id @default(uuid())
  idSpeakingTask     String
  part               SpeakingPartType 
  topic              String?         
  prompt             String           @db.Text // Câu hỏi chính, hoặc nội dung cue card
  subPrompts         Json?            // Các gạch đầu dòng cho Part 2 (You should say...)
  preparationTime    Int              @default(0) // Thời gian chuẩn bị (giây), vd: 60 cho Part 2
  speakingTime       Int              @default(120) // Thời gian nói (giây)
  order              Int              @default(0) // Để sắp xếp thứ tự câu hỏi

  speakingTask SpeakingTask @relation(fields: [idSpeakingTask], references: [idSpeakingTask], onDelete: Cascade)
}

model UserSpeakingSubmission {
  idSpeakingSubmission String   @id @default(uuid())
  idUser               String
  idSpeakingTask       String
  audioUrl             String   // URL tới file audio user đã ghi
  submittedAt          DateTime @default(now())
  status               SpeakingStatus @default(SUBMITTED)

  user         User            @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  speakingTask SpeakingTask    @relation(fields: [idSpeakingTask], references: [idSpeakingTask], onDelete: Cascade)
  feedback     SpeakingFeedback[] // Phản hồi cho bài nộp này
}

model SpeakingFeedback {
  idSpeakingFeedback            String @id @default(uuid())
  idSpeakingSubmission          String @unique // 1 bài nộp chỉ có 1 feedback tổng thể
  
  fluencyAndCoherence           String @db.Text
  lexicalResource               String @db.Text
  grammaticalRangeAndAccuracy   String @db.Text
  pronunciation                 String @db.Text
  
  generalFeedback               String @db.Text
  detailedCorrections           Json? // Lưu các lỗi chi tiết (phát âm, ngữ pháp)
  gradedAt                      DateTime @default(now())

  submission UserSpeakingSubmission @relation(fields: [idSpeakingSubmission], references: [idSpeakingSubmission], onDelete: Cascade)
}

enum SpeakingPartType {
  PART1
  PART2
  PART3
}

enum SpeakingStatus {
  SUBMITTED
  GRADED
}

