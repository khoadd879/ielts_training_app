import { BadRequestException, Injectable } from '@nestjs/common';
import { CreateVocabularyDto } from './dto/create-vocabulary.dto';
import { UpdateVocabularyDto } from './dto/update-vocabulary.dto';
import { DatabaseService } from 'src/database/database.service';
import axios from 'axios';
import { GenerateContentResponse, GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

const vocabCache = new Map<
  string,
  {
    word: string;
    phonetic: string | null;
    meaning: string | null;
    example: string | null;
  }
>();

@Injectable()
export class VocabularyService {
  constructor(private readonly databaseService: DatabaseService) {}

  //Vocabulary
  async createVocabulary(createVocabularyDto: CreateVocabularyDto) {
    const {
      idUser,
      idTopic,
      word,
      meaning,
      phonetic,
      example,
      loaiTuVung,
      level,
    } = createVocabularyDto;

    const existingUser = await this.databaseService.user.findUnique({
      where: { idUser },
    });

    if (!existingUser) {
      throw new BadRequestException('User not found');
    }

    const data = await this.databaseService.tuVung.create({
      data: {
        idUser,
        idTopic: idTopic ? idTopic : null,
        loaiTuVung,
        word,
        meaning,
        phonetic,
        example,
        level,
      },
    });

    return {
      message: 'Vocabulary created successfully',
      data: data,
      status: 200,
    };
  }

  //Tim kiem tat ca tu vung theo idUser
  async findAllByIdUser(idUser: string) {
    return this.databaseService.tuVung.findMany({ where: { idUser } });
  }

  //Cap nhat tu vung
  async update(id: string, updateVocabularyDto: UpdateVocabularyDto) {
    const {
      idUser,
      idTopic,
      word,
      meaning,
      phonetic,
      example,
      loaiTuVung,
      level,
    } = updateVocabularyDto;

    const existingVocabulary = await this.databaseService.tuVung.findUnique({
      where: { idTuVung: id },
    });

    if (!existingVocabulary) {
      throw new BadRequestException('Vocabulary not found');
    }

    const existingUser = await this.databaseService.user.findUnique({
      where: { idUser },
    });

    if (!existingUser) {
      throw new BadRequestException('User not found');
    }
    const data = await this.databaseService.tuVung.update({
      where: { idTuVung: id },
      data: {
        idTopic,
        word,
        meaning,
        phonetic,
        example,
        loaiTuVung,
        level,
      },
    });
    return {
      message: 'Vocabulary updated successfully',
      data: data,
      status: 200,
    };
  }

  //Xoa tu vung
  async remove(id: string, idUser: string) {
    const existingVocabulary = await this.databaseService.tuVung.findUnique({
      where: { idTuVung: id },
    });

    if (!existingVocabulary) {
      throw new BadRequestException('Vocabulary not found');
    }

    const existingUser = this.databaseService.user.findUnique({
      where: { idUser },
    });

    if (!existingUser) {
      throw new BadRequestException('User not found');
    }
    const data = await this.databaseService.tuVung.delete({
      where: { idTuVung: id },
    });

    return {
      message: 'Vocabulary deleted successfully',
      data: data,
      status: 200,
    };
  }

  // //Tim kiem tu vung theo tu khoa
  // async findByWord(word: string, idUser: string) {
  //   const existingUser = await this.databaseService.user.findUnique({
  //     where: { idUser },
  //   });

  //   if (!existingUser) {
  //     throw new BadRequestException('User not found');
  //   }

  //   await this.databaseService.tuVung.findMany({
  //     where: {
  //       word: {
  //         contains: word,
  //         mode: 'insensitive', // kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  //       },
  //     },
  //   });

  //   return {
  //     message: 'Vocabularies retrieved successfully',
  //     status: 200,
  //   };
  // }

  //Dua tu vung vao topic
  async addVocabularyToTopic(idTuVung: string, idTopic: string) {
    const existingVocabulary = await this.databaseService.tuVung.findUnique({
      where: { idTuVung },
    });
    if (!existingVocabulary) {
      throw new BadRequestException('Vocabulary not found');
    }
    const existingTopic = await this.databaseService.topic.findUnique({
      where: { idTopic },
    });
    if (!existingTopic) {
      throw new BadRequestException('Topic not found');
    }
    const data = await this.databaseService.tuVung.update({
      where: { idTuVung },
      data: { idTopic },
    });

    return {
      message: 'Vocabulary added to topic successfully',
      data: data,
      status: 200,
    };
  }

  //Goi y vocab
  async suggest(word: string): Promise<{
    word: string;
    phonetic: string | null;
    meaning: string | null;
    example: string | null;
  }> {
    const lowerWord = word.toLowerCase().trim();

    // üü° 0. Ki·ªÉm tra cache tr∆∞·ªõc
    if (vocabCache.has(lowerWord)) {
      // console.log(`‚ö° Cache hit cho "${lowerWord}"`);
      return vocabCache.get(lowerWord)!;
    }

    let phonetic: string | null = null;
    let example: string | null = null;
    let meaning: string | null = null;
    let loaiTuVung: string | null = null;
    let level: string | null = null;

    // üü° 1. G·ªçi dictionaryapi.dev tr∆∞·ªõc (ch·ªâ l·∫•y phonetic + example)
    try {
      const dictRes = await axios.get(
        `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(lowerWord)}`,
      );
      const entry = dictRes.data[0];

      phonetic = entry.phonetic || entry.phonetics?.[0]?.text || null;
      example = entry.meanings?.[0]?.definitions?.[0]?.example || null;
      loaiTuVung = entry.meanings?.[0]?.partOfSpeech?.toUpperCase() ?? null;
    } catch (dictErr) {
      console.warn(
        `DictionaryAPI kh√¥ng c√≥ d·ªØ li·ªáu cho "${lowerWord}":`,
        dictErr.message,
      );
    }

    // üß† 2. G·ªçi Gemini ƒë·ªÉ l·∫•y nghƒ©a ti·∫øng Vi·ªát & b·ªï sung n·∫øu thi·∫øu
    try {
      const prompt = `
B·∫°n l√† m·ªôt h·ªá th·ªëng t·ª´ ƒëi·ªÉn Anh - Vi·ªát chuy√™n nghi·ªáp. Kh√¥ng d·ªãch ng∆∞·ª£c Vi·ªát - Anh v√† kh√¥ng tr·∫£ v·ªÅ g√¨ khi m√† t·ª´ kh√¥ng h·ª£p l·ªá ho·∫∑c l√† kh√¥ng ƒë√∫ng v√† c·∫£ nh·ªØng t·ª´ ch·ª≠i th·ªÅ n·ªØa.
H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ "${lowerWord}" theo ƒë√∫ng ƒë·ªãnh d·∫°ng JSON sau (kh√¥ng c√≥ markdown, kh√¥ng c√≥ gi·∫£i th√≠ch):

{
  "word": "",
  "phonetic": null,
  "meaning": "",
  "example": "",
  "loaiTuVung": "NOUN | VERB | ADJECTIVE | ADVERB | PHRASE | IDIOM | PREPOSITION | CONJUNCTION | INTERJECTION",
  "level": "Low | Mid | High"
}

Y√™u c·∫ßu:
- "meaning": gi·∫£i th√≠ch nghƒ©a ti·∫øng Vi·ªát ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.
- "example": 1 c√¢u v√≠ d·ª• ƒë∆°n gi·∫£n minh h·ªça.
- "phonetic": phi√™n √¢m theo chu·∫©n IPA n·∫øu c√≥.
- "loaiTuVung": x√°c ƒë·ªãnh ch√≠nh x√°c lo·∫°i t·ª´ ti·∫øng Anh.
- "level": ƒë√°nh gi√° ƒë·ªô kh√≥ c·ªßa t·ª´ (Low: c∆° b·∫£n, Mid: trung b√¨nh, High: n√¢ng cao).
`;

      const response: GenerateContentResponse = await ai.models.generateContent(
        {
          model: 'gemini-2.5-flash',
          contents: prompt,
        },
      );

      const rawText = response.text?.trim() ?? '';
      const cleanedText = rawText
        .replace(/```json/i, '')
        .replace(/```/g, '')
        .trim();
      try {
        const parsed = JSON.parse(cleanedText);

        // B·ªï sung d·ªØ li·ªáu c√≤n thi·∫øu
        phonetic = phonetic ?? parsed.phonetic ?? null;
        example = example ?? parsed.example ?? null;
        meaning = parsed.meaning ?? null;
        loaiTuVung = parsed.loaiTuVung?.toUpperCase() ?? loaiTuVung;
        level = parsed.level ?? null;
      } catch (parseErr) {
        console.warn('Gemini tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON h·ª£p l·ªá:', parseErr);
      }
    } catch (err) {
      console.error('L·ªói khi g·ªçi Gemini:', err);
    }

    const result = {
      word: lowerWord,
      phonetic,
      meaning,
      example,
      loaiTuVung,
      level,
    };

    // üß† 3. L∆∞u v√†o cache ƒë·ªÉ t√°i s·ª≠ d·ª•ng
    vocabCache.set(lowerWord, result);

    return result;
  }
}
